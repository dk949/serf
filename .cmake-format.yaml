# -----------------------------
# Options affecting formatting.
# -----------------------------
disable: false # Disable formatting entirely, making cmake-format a no-op
line_width: 100 # How wide to allow formatted cmake files
tab_size: 4 # How many spaces to tab for indent
use_tabchars: false
fractional_tab_policy: 'use-space'
max_subgroups_hwrap: 2 # If an argument group contains more than this many sub-groups then force it to a vertical layout.
max_pargs_hwrap: 3 # If a positional argument group contains more than this many arguments, then force it to a vertical layout.
max_rows_cmdline: 3 # If a cmdline positional group consumes more than this many lines without nesting, then invalidate the layout (and nest)
separate_ctrl_name_with_space: true # If true, separate flow control names from their parentheses with a space
separate_fn_name_with_space: false # If true, separate function names from parentheses with a space
dangle_parens: true # If a statement is wrapped to more than one line, than dangle the closing parenthesis on its own line.
dangle_align: 'prefix-indent' # `prefix`: the start of the statement,  `prefix-indent`: the start of the statement, plus one indentation level, `child`: align to the column of the arguments
min_prefix_chars: 0 # If the statement spelling length (including space and parenthesis) is smaller than this amount, then force reject nested layouts.
max_prefix_chars: 0 # If the statement spelling length is larger than the tab width by more than this amount, then force reject un-nested layouts.
max_lines_hwrap: 2 # If a candidate layout is wrapped horizontally but it exceeds this many lines, then reject the layout.
line_ending: 'unix' # What style line endings to use in the output.
command_case: 'canonical' # Format command names consistently as 'lower' or 'upper' case
keyword_case: 'upper' # Format keywords consistently as 'lower' or 'upper' case
always_wrap: [] # A list of command names which should always be wrapped
enable_sort: true # If true, the argument lists which are known to be sortable will be sorted lexicographicall
autosort: false # If true, the parsers may infer whether or not an argument list is sortable (without annotation).
require_valid_layout: false
layout_passes: {} # A dictionary mapping layout nodes to a list of wrap decisions. See the documentation for more information.



# ------------------------------------------------
# Options affecting comment reflow and formatting.
# ------------------------------------------------
bullet_char: '*' # What character to use for bulleted lists
enum_char: '.' # What character to use as punctuation after numerals in an enumerated list
first_comment_is_literal: false # If comment markup is enabled, don't reflow the first comment block in each listfile. Use this to preserve formatting of your copyright/license statements.
literal_comment_pattern: # If comment markup is enabled, don't reflow any comment block which matches this (regex) pattern. Default is `None` (disabled).
fence_pattern: '^\\s*([`~]{3}[`~]*)(.*)$'  # Regular expression to match preformat fences in comments default= ``r'^\s*([`~]{3}[`~]*)(.*)$'``
ruler_pattern: '^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$' # Regular expression to match rulers in comments default= # ``r'^\s*[^\w\s]{3}.*[^\w\s]{3}$'``
explicit_trailing_pattern: '#<' # If a comment line matches starts with this pattern then it is explicitly a # trailing comment for the preceeding argument. Default is '#<'
hashruler_min_length: 10 # If a comment line starts with at least this many consecutive hash characters, then don't lstrip() them off.
canonicalize_hashrulers: true # If true, then insert a space between the first hash char and remaining hash chars in a hash ruler, and normalize its length to fill the column
enable_markup: true # enable comment markup parsing and reflow
