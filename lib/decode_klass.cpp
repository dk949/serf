#include "decodeKlass.hpp"
#define DECODE_KLASS_(X) \
    case (GIT_##X):      \
        return #X

const char *decodeKlass(git_error_t klass) {
    switch (klass) {
        DECODE_KLASS_(ERROR_NONE);
        DECODE_KLASS_(ERROR_NOMEMORY);
        DECODE_KLASS_(ERROR_OS);
        DECODE_KLASS_(ERROR_INVALID);
        DECODE_KLASS_(ERROR_REFERENCE);
        DECODE_KLASS_(ERROR_ZLIB);
        DECODE_KLASS_(ERROR_REPOSITORY);
        DECODE_KLASS_(ERROR_CONFIG);
        DECODE_KLASS_(ERROR_REGEX);
        DECODE_KLASS_(ERROR_ODB);
        DECODE_KLASS_(ERROR_INDEX);
        DECODE_KLASS_(ERROR_OBJECT);
        DECODE_KLASS_(ERROR_NET);
        DECODE_KLASS_(ERROR_TAG);
        DECODE_KLASS_(ERROR_TREE);
        DECODE_KLASS_(ERROR_INDEXER);
        DECODE_KLASS_(ERROR_SSL);
        DECODE_KLASS_(ERROR_SUBMODULE);
        DECODE_KLASS_(ERROR_THREAD);
        DECODE_KLASS_(ERROR_STASH);
        DECODE_KLASS_(ERROR_CHECKOUT);
        DECODE_KLASS_(ERROR_FETCHHEAD);
        DECODE_KLASS_(ERROR_MERGE);
        DECODE_KLASS_(ERROR_SSH);
        DECODE_KLASS_(ERROR_FILTER);
        DECODE_KLASS_(ERROR_REVERT);
        DECODE_KLASS_(ERROR_CALLBACK);
        DECODE_KLASS_(ERROR_CHERRYPICK);
        DECODE_KLASS_(ERROR_DESCRIBE);
        DECODE_KLASS_(ERROR_REBASE);
        DECODE_KLASS_(ERROR_FILESYSTEM);
        DECODE_KLASS_(ERROR_PATCH);
        DECODE_KLASS_(ERROR_WORKTREE);
        DECODE_KLASS_(ERROR_SHA1);
        DECODE_KLASS_(ERROR_HTTP);
        DECODE_KLASS_(ERROR_INTERNAL);
    }
    return "UNKNOWN_ERROR";
}
